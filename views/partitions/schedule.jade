mixin details(session)
  if session.speaker
    span.speaker__name--schedule
      span= session.speaker.name
      span= session.speaker.position
  //- if session.about
  //-   span.session__button.session__button--inactive

mixin sessionData(session)
  .session__time
    span= moment(session.time.start).format('HH:MM')
    if session.time.end
      span= moment(session.time.end).format('HH:MM')
  .session__arrangement
    h4.session__name
      span.session__icon= session.article
    if (session.type == report)
      .session__info.session__info--right
        +details(session)
    else
      .session__info
        +details(session)
    .session__about.invisible= session.about || 'sorry, no description...'
      .session__calendButtons
        span= schedule.locales.calend_links
        a.session__calendLink.session__calendLink--gCal( href="#{TODO get link from utilities}" target="_blank" rel="nofollow") Google Calendar
        a.session__calendLink.session__calendLink--iCal( href="#") iCalendar

mixin table(data)
  each session, indx in data
    if (session.type == 'entertainment')
      .session.session--entertainment
        +sessionData(session)
    else
      .session.session--report
        +sessionData(session)
//data is pushed to template only if isRendering==true in config.js
//next two lines are to prevent error because data
//is not defined for module if isRendering==false
if schedule
  section#schedule.page-wrap
    h2.module-header= schedule.locales.title
    .schedule
      each conference in schedule.data
        .conference
          .conference__title
            h3= schedule.locales.conf_schedule + ' ' + conference.name
            span.schedule__toggleButton(onclick="changeConfRepresent(this)")
              +icon('arrowUp')
          ul
            each day, indx in conference.days
              if (indx == 0)
                li.conference__tab--active(onclick="changeTab(this)")=  moment(day.day_info).format('MMM DD')
              else
                li(onclick="changeTab(this)")=  moment(day.day_info).format('MMM DD')
          each day, indx in conference.days
            .timetable
              +table(day.timetable)
              
  script.
    var activeClass = 'conference__tab--active';
    var tableHidden = 'table-hidden';
    var timetable = 'timetable';
    var viewport = document.documentElement.clientWidth;
    var menuHeight = document.getElementById('menu').offsetHeight;
    var list = document.querySelector('.conference > ul');
    var activeTab = list.querySelector('.' + activeClass);
    var conf = list.parentNode;
    var listHeight = list.offsetHeight;
    var tables = conf.getElementsByClassName(timetable);
    
    
      if (viewport <= #{config.breakPoint}) {
        //fix tabs on scroll for small devices
        document.body.onscroll = fixTabs;
        //hide session info
        var sessionInfoArr = document.getElementsByClassName('session__info');
        Array.prototype.forEach.call(sessionInfoArr, function(el) {
          el.classList.add('invisible');
        });
      } else {
        //show proper tab
        activeTab.onclick();
      }
    
    //- function changeConfRepresent(el) {
    //-   var confTitle = el.parentNode;
    //-   var dayList = confTitle.nextSibling;
    //-   var conference = confTitle.parentNode;
    //-   var tables = conference.getElementsByClassName(timetable);
    //-   
    //-   el.classList.toggle('arrowDown');
    //-   dayList.classList.toggle('conf-hidden');
    //-   //Toggle inner timetables class
    //-   Array.prototype.forEach.call(tables, function(table) {
    //-     table.classList.toggle('conf-hidden');
    //-   });
    //- }
    
    
    function changeTab(el, scroll) {
      //this variables should be created here to specify exactly current conference
      
        //make li active if it is not
        if (viewport > #{config.breakPoint}) {
          el.classList.add(activeClass);
        }
        //find index of active tab and show appropriate table
        Array.prototype.forEach.call(list.childNodes, function(item, i) {
          
          if (viewport > #{config.breakPoint}) {
            tables[i].classList.add(tableHidden);
          }
          //remove active class is item was active before click
          if (item !== el) {
            item.classList.remove(activeClass);
          }
          //show table with the same index as active tab
          if (item == el) {
            if (viewport > #{config.breakPoint}) {
              tables[i].classList.remove(tableHidden);
            } else {
              var targetScroll = tables[i].offsetTop - menuHeight - list.offsetHeight;
              scrollTo(targetScroll, 300);
            }
          }
        });
    }
    
    function toggleAbout(el) {
      var session = el.parentNode;
      var about = session.getElementsByClassName('session__about')[0];
      var icon = session.getElementsByClassName('session__icon')[0];
      var info = session.getElementsByClassName('session__info')[0];
      icon.classList.toggle('session__icon--expanded');
      about.classList.toggle('invisible');
      if (viewport <= #{config.breakPoint}) {
        info.classList.toggle('invisible');
      }
    }
    
    (function() {
      var reports = document.getElementsByClassName('session--report');
      Array.prototype.forEach.call(reports, function(report) {
        var header = report.getElementsByClassName('session__name')[0];
        header.addEventListener('click', function() {toggleAbout(header)});
      });
    })();
      
      function fixTabs(el) {
        var bodyScrlPos = document.body.scrollTop;
        var schedule = conf.parentNode;
        var scheduleHeight = schedule.offsetHeight;
        var scheduleTop = schedule.offsetTop;
        var scheduleBottom = scheduleHeight + scheduleTop;
        var confTopPos = conf.offsetTop;
        var confHeight = conf.offsetHeight;
        var confBottom = confTopPos + confHeight;
        var tablesTopPoss = Array.prototype.map.call(tables, function(table) {
          return table.offsetTop;
        });
        tablesTopPoss.push(scheduleBottom);
        
        if (viewport <= #{config.breakPoint}) {          
          if (bodyScrlPos >= confTopPos - menuHeight) {            
            if (bodyScrlPos <= (scheduleBottom - menuHeight)) {
              
              //this chunk is for fixing tabs on scroll
              conf.style.paddingTop = listHeight + 'px';
              list.classList.add('list-fixed');
              list.style.top = menuHeight + 'px';
              
              //make tabs "stick" to confBottom
              if (bodyScrlPos > (scheduleBottom - listHeight - menuHeight)) {
                list.style.top = scheduleBottom - bodyScrlPos - listHeight + 'px';
              }
              
              //this chunk is for selecting proper tab due to scrollTop
              //
              //remove active tab classname
              
              Array.prototype.forEach.call(tablesTopPoss, function(tablTop, i) {
                var nextItem = tablesTopPoss[i + 1]
                if ((bodyScrlPos >= tablTop - menuHeight - listHeight) && (bodyScrlPos < nextItem - menuHeight - listHeight)) {
                  list.childNodes[i].classList.add(activeClass);
                } else {
                  //condition to prevent Type Error
                  if (typeof list.childNodes[i] !== 'undefined') {
                    list.childNodes[i].classList.remove(activeClass);
                  }
                }
              });
            } else {
              resetList();
            }
          } else {
            resetList();
          }
        }
        
        function resetList() {
          conf.style.paddingTop = '0px';
          list.classList.remove('list-fixed');
        }
      }
    
