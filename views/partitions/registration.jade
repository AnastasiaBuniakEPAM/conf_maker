//data is pushed to template only if isRendering==true in config.js
//next two lines are to prevent error because data is not defined for module
//if isRendering==false
if registration
  section#registration.page-wrap
    .registration
      h2.module-header= registration.title
      form(onsubmit="submitForm(this, event)")
        .registration__field
          input.registration__input(id="cm_name" type="text" onchange="checkValidation(this)")
          label.label-regInput(for="cm_name") name
          span.registration__tip.invisible= registration.Name_err
        .registration__field
          input.registration__input(id="cm_email" type="email" onchange="checkValidation(this)")
          label.label-regInput(for="cm_email") email
          span.registration__tip.invisible= registration.Email_err
        .registration__field
          input.registration__input(id="cm_tel" type="tel" onchange="checkValidation(this)")
          label.label-regInput(for="cm_tel") phone
          span.registration__tip.invisible= registration.Phone_err
        .registration__field
          input.registration__submit(type="submit" value="#{registration.button_text}")

script.
  //add listeners for button
  (function() {
    var btn = document.getElementsByClassName('registration__submit')[0];
    btn.onmousedown = pushButton;
    btn.onmouseup = resetButton;
    btn.onmouseout = resetButton;
    function pushButton() {
      btn.classList.add('button-pushed');
    }
    
    function resetButton() {
      btn.classList.remove('button-pushed');
    }
  })();
  function submitForm(form, e) {
    e.preventDefault();
    
    var inputs = document.getElementsByClassName('registration__input');      
    var formInputStates = [];
    var formData = {};
    
    //collect states of all inputs in formInputStates array
    Array.prototype.forEach.call(inputs, function(input) {
      var state = checkValidation(input);
      formInputStates.push(state);
      //collect values to formData object
      formData[convertType(input.type)] = input.value;
    });
    
    //if every input is valid - set general formState equals true
    var formState = Array.prototype.every.call(formInputStates, function(item){
      return item == true;
    });
    
    //send formData if all items are valid
    if (formState) {
      pushData(formData);
      clearInputs(inputs);
    }
  }
  
  function pushData(data) {
    var regWrap = document.getElementById('registration');
    var json = JSON.stringify(data);
    var request = new XMLHttpRequest();
    request.open('post', '/', true);
    request.setRequestHeader('Content-Type', 'application/json');
    request.onreadystatechange = function() {
      if (request.readyState==4 && request.status==200) {
        regWrap.innerHTML = '<div class="regist-resp">' + request.responseText + '</div>';
      }
      if (request.status==500) {
        regWrap.innerHTML = '<div class="regist-resp">Registration failed...</div>';
      }
    }
    request.send(json);
  }
  
  function clearInputs(items) {
    Array.prototype.forEach.call(items, function(item) {
      item.value = '';
    });
  }
  
  //collector of existing error messages
  var errors = {};
  
  function checkValidation(input) {
    var label = input.nextSibling;
    var errorSpan = label.nextSibling;
    var emptyInpErr = 'This field is required';
    //store original
    if (errorSpan.innerHTML !== emptyInpErr) {
      errors[input.id] = errorSpan.innerHTML;
    }
    
    var bool = isValid(input);
    
    if (bool) {
        errorSpan.classList.add('invisible');
        input.classList.remove('registration__input--invalid');
        label.classList.remove('registration__input--invalid');
    } else {
      if (!input.value) {
        errorSpan.innerHTML = emptyInpErr;
      } else {
        errorSpan.innerHTML = errors[input.id];
      }
      errorSpan.classList.remove('invisible');
      input.classList.add('registration__input--invalid');
      label.classList.add('registration__input--invalid');
    }
    return bool;
  }
  
  function isValid(input) {
    var type = input.getAttribute('type');
    var patterns = {
      tel:/^([0-9\(\)\/\+ \-]{3,20})$/,
      email: /\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*([,;]\s*\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*)*/,
      text: /^[a-zA-Z_ -]{3,50}$/
    };
    var isValid = new RegExp(patterns[type]).test(input.value);
    return isValid;
  }
  
  function convertType(type) {
    var convert = {
      tel: 'Phone',
      email: 'E-mail',
      text: 'Name'
    }
    return convert[type];
  }
